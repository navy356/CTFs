import os

chars={"Int0":"[]^[]",
        "Int1":"[]^[[]]",
    "ArrayArray":"[].[]",
    "StrA":"([].[])[[]^[]]",
    "Str0":"([]^[]).[][[]^[]]",
    "Str1":"([]^[[]]).[][[]^[]]",
    "Strr":"([].[])[[]^[[]]]"}

def displayChars():
    for k,v in chars.items():
        print(k)
        print(v)

def bruteXor(depth,FinalChar,FinalValue,FinalValueDebug,XorChar, charsFound, xor):
    FinalChar=chr(ord(FinalChar)^ord(XorChar))
    if xor!='':
        FinalValue=FinalValue+"("+xor+")"+'^'
        FinalValueDebug=FinalValueDebug+"("+XorChar+")"+"^"
    if FinalChar.isalnum():
        StrFinalChar="Str"+FinalChar
        if StrFinalChar not in charsFound:
            charsFound[StrFinalChar]=FinalValue[:-1]
            #print(FinalChar)
            #print(FinalValueDebug)
            #print(FinalValue)
    if depth==0:
        return
    for k,v in chars.items():
        if k.startswith("Str"):
            alph=k[-1]
            bruteXor(depth-1,FinalChar,FinalValue,FinalValueDebug,alph,charsFound,v,)

def joinChars(charsTemp):
    for k,v in charsTemp.items():
        if k not in chars:
            chars[k]=charsTemp[k]

def bruteDepth(n):
    charsFound=dict()
    bruteXor(n,chr(0),'','',chr(0), charsFound, '')
    joinChars(charsFound)

def availableChars():
    print("---------")
    avail=list()
    for k,v in chars.items():
        if k.startswith("Str"):
            alph=k[-1]
            avail.append(alph)
    avail.sort()
    for val in avail:
        print(val,end=",")
    print()
    print("---------")

bruteDepth(2)
bruteDepth(3)
bruteDepth(4)
availableChars()