import re

chmap = {'a': '[![]+[]][0][1]',
         'b': '[CSS+[]][0][2]',
          'c': '[CSS+[]][0][5]',
          'd': '[CSS[1]+[]][0][2]',
          'e': '[CSS+[]][0][4]',
          'f': '[CSS[1]+[]][0][4]',
          'g': '',
          'h': '',
          'i': '[CSS[1]+[]][0][5]',
          'j': '[CSS+[]][0][3]',
          'k': '',
          'l': '[![]+[]][0][2]',
          'm': '',
          'n': '[CSS[1]+[]][0][1]',
          'o': '[CSS+[]][0][1]',
          'p': '',
          'q': '',
          'r': '[!![]+[]][0][1]',
          's': '[![]+[]][0][3]',
          't': '[CSS+[]][0][6]',
          'u': '[CSS[1]+[]][0][0]',
          'v': '[CSS[[![]+[]][0][3]]+[]][0][20]',
          'w': '',
          'x': '',
          'y': '',
          'z': '',
          'A': '',
          'B': '',
          'C': '[CSS+[]][0][8]',
          'D': '',
          'E': '',
          'F': '',
          'G': '',
          'H': '',
          'I': '',
          'J': '',
          'K': '',
          'L': '',
          'M': '',
          'N': '',
          'O': '',
          'P': '',
          'Q': '',
          'R': '',
          'S': '[CSS+[]][0][9]',
          'T': '',
          'U': '',
          'V': '',
          'W': '',
          'X': '',
          'Y': '',
          'Z': '',
          ' ': '[CSS+[]][0][7]',
          '[': '[CSS+[]][0][0]',
          ']': '[CSS+[]][0][11]',
          '(': '[CSS[[![]+[]][0][3]]+[]][0][10]',
          ')': '[CSS[[![]+[]][0][3]]+[]][0][11]',
          '=':'='
         }


def getNumber(n):
    zero = '![]+![]'
    one = '![]+!![]'

    if n == 0:
        return zero
    elif n == 1:
        return one
    else:
        '''
        n = n-1
        while True:
            one = one+"+!![]"
            n=n-1
            if(n==0):
                break
        return one
        '''
        n_tmp = n//2
        if(n % 2 == 0):
            return getNumber(n_tmp)+'+'+getNumber(n_tmp)
        else:
            return getNumber(n_tmp)+'+'+getNumber(n_tmp+1)


def getLetter(ch):
    comm = chmap[ch]
    if comm == '':
        print(ch+' is not available')
        exit(1)
    # print(comm)
    nums = re.search(r'\d+', comm)
    while True:
        if(nums is None):
            break
        n = nums.group()
        # print(n)
        i, j = nums.span()
        num = getNumber(int(n))
        comm = comm[:i]+num+comm[j:]
        # print(comm)
        nums = re.search(r'\d+', comm)

    return comm


def getWord(word):
    str = ''
    for i in word:
        ch = getLetter(i)
        # print(ch)
        str = str+'+'+ch
    return str[1:]


def getPayload(payload):
    nums = re.search(r'\d+', payload)
    prev_i = 0
    char_iterator = 0
    if(nums is None):
        payload = getWord(payload)
        # print(payload)
        return payload
    while True:
        if(nums is None):
            # print(payload)
            payload_before = getWord(payload[prev_i:])
            payload = payload[:prev_i]+'+'+payload_before
            break
        n = nums.group()
        i, j = nums.span()
        # print(payload)
        # print(n)
        # print(payload[prev_i:i])
        payload_before = getWord(payload[prev_i:i])
        num = getNumber(int(n))
        # print(payload_before)
        # print(num)
        payload = payload_before+'+['+num+']'+payload[j:]
        # print(payload_before+'+['+num+']')
        # print(payload)
        nums = re.search(r'\d+', payload)
        prev_i = len(payload_before)+len('+[]')+len(num)
        # print(payload[prev_i:])

    # print(payload)
    return payload

#print(getNumber(2))
print(getPayload('alert()'))
