# Generated by Django 3.2.4 on 2021-06-10 08:01

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


def create_data(apps, schema_editor):
    DreamUser = apps.get_model('sign_service', 'DreamUser')
    user = DreamUser(username='testuser', password='password')
    user.save()

    Document = apps.get_model('sign_service', 'Document')
    doc = Document(user=user, title='드림회사 근로계약서', contents='드림드림주식회사(이하 “갑”이라 한다)와 작성자(이하 “을”이라 한다)는 다음과 같이 근로계약을 체결하고 이를 성실히 이행할 것을 약정한다.\n\n제1조【계약의 목적】\n“갑”은 드림핵건설현장(부서)의 업무수행을 위해 “을”을 고용하여 제 6 조에서 정한 보수\n         를 지급하고, “을”은 “갑”을 위하여 필요한 기술 및 근로를 제공함에 있어 이에 관한 \n         의무를 규정함을 목적으로 한다.\n제2조【계약기간】\n이 계약의 유효기간은  다음과 같다\n1. 20  년 ○○월 ○○일부터 20  년 ○○월 ○○일까지로 한다\n2. 20  년 ○○월 ○○일부터 ○○○현장(사업)의 담당업무 종료시까지 (단, 담당업무\n           의 종료여부는 “갑”의 판단에 따른다.)\n제3조【근무지와 담당업무】\n“을”은 “갑”의 정규 (계약) 사원으로서 ○○○현장(부서)에서 “갑”이 위임하는 업무를  \n        성실히 수행하여야 하며 동 업무의 종류 및 범위는 다음과 같다.\n1. \n2. \n제4조【근로조건】\n근로시간 및 시업, 종업, 휴식시간, 휴일 등은 “근무지 부서 (현장)에서 ”갑“이 정한 바에 의하며, 부서 (현장) 의 형편에 따라 조정될 수 있다.\n제5조【직위 및 급호】\n“을”의 직위와 급호는 다음과 같다.\n1. 직위: \n2. 직급: \n3. 호봉: \n제6조【보  수】\n1. 급여는 제5조에서 부여받은 급호로 “갑”의 급여규정에 의거, 매월 원 화로 국내에서 계산 지급한다.\n2. 상여금의 지급기준, 지급율, 지급시기는 정규 (계약) 직원으로 적용한다.\n3. 1년 이상 근속자에 대해서는 매 1년에 대해 1개월 분의 평균급여를 퇴직금으로 지급하고  초과분에 대해서는 일할 계산 지급한다.\n4. “갑”은 국내법 및 현지법이 정하는 바에 따라 “을”에게 지급하는 제급여에서 제세공과를 원천징수 한다.\n제7조【복종의무】\n“을”은 계약기간중 “갑” 또는 “갑”의 업무를 위임받아 지휘하는 자로부터 모든 업무상의 \n        지시에 따라야 한다.\n제8조【계약해지】\n아래 각 호에 해당하는 사유가 발생하였을 때는 “갑” 또는 “갑”의 업무를 위임받은 자는 \n        계약을 해지할 수 있다.\n1. “을”이 고의 또는 중대한 과실로 “갑”에게 손실을 끼친 때\n2. “을”이 본 계약이나 취업규칙 등 사규를 위반한 경우\n3. “을”이 정당한 이유 없이 업무수행을 지체하거나 불성실하다고 인정된 경우\n4. “갑”의 사정으로 인하여 계약기간까지 “을”의 계속 근무가 불필요하다고 “갑”이 인정  한 경우\n5. 상병 등으로 본인의 계속근무가 불가능하다고 판단한 경우\n6. 폭행, 파괴, 태업을 선동하는 등 불미한 행위를 하였을 때\n7. 취업기간 중 금고이상의 형에 해당하는 형사상의 유죄판결을 받았을 때\n8. 상사의 정당한 지시에 불복한 때\n9. “갑”의 동의 없이 타사업장에 취업하거나 “갑”의 관리감독 범위를 벗어나 무단이탈하  였을 때\n       10. 채용조건에 구비된 각종 문서의 위조, 변조 또는 허위사실이 발견되거나 신체검사를  위계로 하였을 때\n제9조【손해배상책임】\n제8조 1항의 사유가 발생하였을 경우 “을”과 “을”의 보증인은 연대하여 그 손해를 “갑”에게 배상하여야 한다.\n제10조【준  칙】\n“갑”과 “을”의 권리, 의무에 관하여 본 계약에 명시되지 아니한 사항은 근로기준법 및 “갑”의 관련, 취업규칙, 사규 및 지침 등에 따른다.\n\n위와 같이 본 계약이 유효하게 성립하였음을 각 당사자는 증명하면서 본 계약서 2통을 작성하여, 각각 서명 날인 후 “갑”과 “을”이 각각 1통씩을 보관한다.\n\n\n20  년   월   일\n\n\n\n\n\n○○○(이하 "매도인"이라 한다)와 ○○○(이하 "매수인"이라 한다)는 다음과 같이 부동산 매매 계약을 체결한다.\n\n아래 표시 부동산에 관하여 매도인과 매수인은 다음과 같이 매매계약을 체결한다.y\n\n1. 부동산의 표시\n\n\n2. 약정내용\n\n제1조【계약의 목적】\n상기에 명시된 부동산물을 매도인과 매수인의 상호 이익을 위해 계약을 체결한다.\n제2조【계약대금 지급】\n위 부동산매매에 있어 매수인은 매매대금을 아래와 같이 지급하기로 한다.\n매매대금 금 ○○○○만원 중\n계약금으로 금 ○○○○원정을 20○○년 ○월 ○일 지급하고\n중도금으로 금 ○○○○원정을 20○○년 ○월 ○일 지급하며\n잔대금 금 ○○○○원정은 20○○년 ○월 ○일 지급하기로 한다.\n제3조【매매물 인도】\n잔대금 중 임대보증금 ○○○○원은 매매대금에서 공제하며 매수인이 잔대금을 매도인에게 지급한 때에는 매도인은 매수인에게 소유권이전등기에 필요한 모든 서류를 교부하고 매매목적물을 20○○년 ○월 ○일까지 인도하여야 한다.\n제4조【부과금 부담】\n매매물건에 관한 조세공과 기타의 부과금은 매매잔대금 지급일까지는 매도인의 부담으로 하고 그 이후에는 매수인의 부담으로 한다.\n  ※ 단서사항이 있을시 이를 기재함.\n제5조【매매물 이전】\n매매물건의 소유권은 매매잔대금 지급기일에 매도인으로부터 매수인에게 이전한다.\n제6조【기타비용 부담】\n등록세 기타 소유권이전등기에 소요되는 비용은 매수인의 부담으로 한다.\n제7조【계약위반】\n양 당사자중 어느 일방이 본 계약을 위반하였을 때에는 다른 일방은 최고없이 본 계약을 해제함과 동시에, 매수인이 위반한 때에는 계약금은 매도인이 취득하고 매도인이 위반한 때에는 계약금의 배액을 매수인에게 지급하여야 한다.\n제8조【준   칙】\n본 계약서에 기재되지 아니한 사항은 민법 및 기타 일반관례에 의하여 당사자가 협의하여 결정한다.\n\n위와 같이 본 계약이 유효하게 성립하였음을 각 당사자는 증명하면서 본 계약서 2통을 작성하여, 각각 서명 날인 후 “갑”과 “을”이 각각 1통씩을 보관한다.')
    doc.save()

class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='DreamUser',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('signpath', models.TextField()),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Document',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('title', models.CharField(max_length=50)),
                ('contents', models.TextField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='SignDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('pdf', models.BinaryField()),
                ('document', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='sign_service.document')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Sign',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('time', models.DateTimeField(auto_now_add=True)),
                ('image', models.BinaryField()),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.RunPython(create_data),
    ]
