final = [0x7E, 0x7D, 0x9A, 0x8B, 0x25, 0x2D, 0x0D5, 0x3D, 3, 0x2B, 0x38, 0x98, 0x27,
         0x9F, 0x4F, 0x0BC, 0x2A, 0x79, 0, 0x7D, 0x0C4, 0x2A, 0x4F, 0x58, 0, 0, 0, 0, 0, 0, 0, 0]

key = "I_am_KEY"

inv_key = [99, 124, 119, 123, 242, 107, 111, 197, 48, 1, 103, 43, 254, 215, 171, 118, 202, 130, 201, 125, 250, 89, 71, 240, 173, 212, 162, 175, 156, 164, 114, 192, 183, 253, 147, 38, 54, 63, 247, 204, 52, 165, 229, 241, 113, 216, 49, 21, 4, 199, 35, 195, 24, 150, 5, 154, 7, 18, 128, 226, 235, 39, 178, 117, 9, 131, 44, 26, 27, 110, 90, 160, 82, 59, 214, 179, 41, 227, 47, 132, 83, 209, 0, 237, 32, 252, 177, 91, 106, 203, 190, 57, 74, 76, 88, 207, 208, 239, 170, 251, 67, 77, 51, 133, 69, 249, 2, 127, 80, 60, 159, 168, 81, 163, 64, 143, 146, 157, 56, 245, 188, 182, 218, 33, 16, 255, 243,
       210, 205, 12, 19, 236, 95, 151, 68, 23, 196, 167, 126, 61, 100, 93, 25, 115, 96, 129, 79, 220, 34, 42, 144, 136, 70, 238, 184, 20, 222, 94, 11, 219, 224, 50, 58, 10, 73, 6, 36, 92, 194, 211, 172, 98, 145, 149, 228, 121, 231, 200, 55, 109, 141, 213, 78, 169, 108, 86, 244, 234, 101, 122, 174, 8, 186, 120, 37, 46, 28, 166, 180, 198, 232, 221, 116, 31, 75, 189, 139, 138, 112, 62, 181, 102, 72, 3, 246, 14, 97, 53, 87, 185, 134, 193, 29, 158, 225, 248, 152, 17, 105, 217, 142, 148, 155, 30, 135, 233, 206, 85, 40, 223, 140, 161, 137, 13, 191, 230, 66, 104, 65, 153, 45, 15, 176, 84, 187, 22]

INT_BITS = 8

def leftRotate(n, d):

    # In n<<d, last d bits are 0.
    # To put first 3 bits of n at 
    # last, do bitwise or of n<<d
    # with n >>(INT_BITS - d) 
    return (n << d)|(n >> (INT_BITS - d))

def rightRotate(n, d):

    # In n>>d, first d bits are 0.
    # To put last 3 bits of at 
    # first, do bitwise or of n>>d
    # with n <<(INT_BITS - d) 
    return (n >> d)|(n << (INT_BITS - d)) & 0xFF

def manipulateBlock(arr):
    for i in range(0,16):
        for j in range(7,-1,-1):
            #print((j+1)%8,arr,(ord(key[j])&0xff)^arr[j%8],arr[j%8])
            arr[(j+1)%8] = (leftRotate(arr[(j+1)%8],5)-inv_key[(ord(key[j])&0xff)^arr[j%8]])&0xff

    return arr

def main():
    for i in range(0,len(final),8):
        #print(final[i:i+8])
        tmp=manipulateBlock(final[i:i+8])
        for j in tmp:
            print(chr(j),end='')
            if j==0:
                print()
            #print(i,end=',')

    print()
if __name__ == "__main__":
    main()